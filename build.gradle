plugins {
    id 'org.springframework.boot' version '2.7.15'
    id 'io.spring.dependency-management' version '1.1.0'
    id 'java'
    id 'org.hidetake.swagger.generator' version '2.19.2'
    id 'org.sonarqube' version '4.3.1.3277'
    id 'jacoco'
}

group = 'kz.toko'
version = '0.2.4'
sourceCompatibility = '17'

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation platform('software.amazon.awssdk:bom:2.20.142')

    implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.security:spring-security-oauth2-jose'
    implementation 'org.springframework.boot:spring-boot-starter-oauth2-resource-server'
    implementation 'io.swagger.core.v3:swagger-annotations:2.2.15'
    implementation 'org.flywaydb:flyway-core:9.22.0'
    implementation 'org.flywaydb:flyway-mysql:9.22.0'
    implementation 'io.swagger:swagger-annotations:1.6.11'
    implementation 'javax.validation:validation-api:2.0.1.Final'
    implementation 'org.modelmapper:modelmapper:3.1.1'
    implementation 'io.minio:minio:8.2.2'
    implementation 'commons-io:commons-io:2.13.0'
    implementation 'software.amazon.awssdk:s3'

    compileOnly 'org.projectlombok:lombok:1.18.24'
    runtimeOnly 'mysql:mysql-connector-java:8.0.33'
    developmentOnly 'org.springframework.boot:spring-boot-devtools:2.7.15'

    testImplementation 'org.springframework.boot:spring-boot-starter-test:2.7.15'
    testImplementation 'org.springframework.security:spring-security-test:5.7.2'
    testImplementation ('com.github.javafaker:javafaker:1.0.2') {
        exclude group: 'org.yaml', module: 'snakeyaml'
    }
    testImplementation 'org.yaml:snakeyaml:2.2'

    annotationProcessor 'org.projectlombok:lombok:1.18.24'
    swaggerCodegen 'io.swagger.codegen.v3:swagger-codegen-cli:3.0.46'
    swaggerUI 'org.webjars:swagger-ui:5.6.1'
}

swaggerSources {
    tokoRestApi {
        inputFile = file('api/toko-rest-api.yaml')
        code {
            language = 'spring'
            outputDir = file('build/generated')
            configFile = file('api/config.json')
            components = ['models', 'apis']
            additionalProperties = ['useTags': 'true']
        }
        ui {
            outputDir = file("${buildDir}/generated/src/main/resources/static")
            wipeOutputDir = true
        }
    }
}

processResources.dependsOn swaggerSources.tokoRestApi.code
processResources.dependsOn swaggerSources.tokoRestApi.ui

compileJava.dependsOn swaggerSources.tokoRestApi.code
compileJava.dependsOn swaggerSources.tokoRestApi.ui
sourceSets.main.java.srcDir "${swaggerSources.tokoRestApi.code.outputDir}/src/main/java"
sourceSets.main.resources.srcDirs += "${buildDir}/generated/src/main/resources"

sonarqube {
    properties {
        property "sonar.projectKey", "Dauren-Delmukhambetov_cautious-giggle"
        property "sonar.projectName", "Toko app"
        property "sonar.organization", "dauren-delmukhambetov"
        property "sonar.host.url", "https://sonarcloud.io"
        property "sonar.jacoco.reportPaths", "${buildDir}/reports/jacoco/test"
    }
}

bootBuildImage {
    imageName = "daurendelmukhambetov/${project.name}:${project.version}"
    publish = true
    docker {
        publishRegistry {
            username = System.getenv("DOCKER_USERNAME")
            password = System.getenv("DOCKER_PASSWORD")
            url = "https://hub.docker.com/repository/docker/daurendelmukhambetov/"
        }
    }
}


test {
    useJUnitPlatform()
    finalizedBy jacocoTestReport
}

jacocoTestReport {
    dependsOn test
    reports {
        xml.required = true
    }
    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, exclude: [
                    "kz/toko/app/entity/**/*Entity.*",
            ])
        }))
    }
}

jacocoTestCoverageVerification {
    dependsOn check
    violationRules {
        rule {
            limit {
                minimum = 0.25
            }
        }
    }
}

check {
    dependsOn test
    finalizedBy jacocoTestCoverageVerification
}

jar {
    enabled = false
}

task version {
    println project.version
}
