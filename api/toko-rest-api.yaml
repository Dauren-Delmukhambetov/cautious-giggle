openapi: 3.0.1
info:
  title: Toko REST API
  description: Toko REST API methods description
  contact:
    email: dauren.del@gmail.com
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 0.1.8
servers:
  - url: /
    description: Current environment
  - url: http://toko-app-dev.us-east-1.elasticbeanstalk.com
    description: Development environment
tags:
  - name: Products
    description: Product API to manage user's product catalog
  - name: Users
    description: Operations about user
  - name: Stores
    description: Stores API to manage stores
security:
  - OpenIDConnectAuth:
      - openid
      - email
      - profile
paths:
  ## Products API
  /products:
    get:
      tags:
        - Products
      summary: Retrieve all products
      operationId: getProducts
      security: []
      responses:
        200:
          description: The list of products has been successfully fetched
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Product'
    post:
      tags:
        - Products
      summary: Creates a new product
      operationId: createProduct
      security: []
      requestBody:
        description: New product creation request
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateProductRequest'
        required: true
      responses:
        201:
          description: New product has been successfully created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
  /products/{id}:
    get:
      tags:
        - Products
      summary: Get product by ID
      description: >
        This method returns product with given ID
      operationId: getProduct
      security: []
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        200:
          description:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        404:
          description: Product with a given ID has not beed found
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        410:
          description: The product has already been deleted
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    patch:
      tags:
        - Products
      summary: Partially updates a given product
      description: >
        This method allows you to partially update a product with a given `id`.
        In case some properties are not set in the request, they will not be updated.
      operationId: updateProduct
      security: []
      parameters:
        - $ref: '#/components/parameters/EntityId'
      requestBody:
        description: Product update request
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateProductRequest'
        required: true
      responses:
        204:
          description: The product has been successfully updated
        404:
          description: Product with a given ID has not beed found
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        410:
          description: The product has already been deleted
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    delete:
      tags:
        - Products
      summary: Softly deletes a given product
      description: >
        This method allows you to mark a product with a given `id` as deleted and stores the date of deletion.
        Deleted products won't be available for users anymore.
      operationId: deleteProduct
      security: []
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        204:
          description: Product has been successfully deleted
        404:
          description: Product with a given ID has not beed found
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        410:
          description: The product has already been deleted
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /products/{id}/image:
    post:
      tags:
        - Products
      summary: Uploads the product image
      description: >
        This method allows you to upload an image with a size up to 10 Mb and set it as a cover image for the product with a given `id`.
        In case there is already an image for the product it will be replaced by the new one
      operationId: uploadImage
      security: []
      parameters:
        - $ref: '#/components/parameters/EntityId'
      requestBody:
        description: Product's image file
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/File'
      responses:
        201:
          description: Image has been successfully uploaded and bound to the product
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Link'
        404:
          description: Product with a given ID has not beed found
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        410:
          description: The product has already been deleted
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  ## Users API
  /users:
    get:
      tags:
        - Users
      summary: Retrieve all Users
      operationId: getUsers
      responses:
        200:
          description: The list of users has been successfully fetched
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        401:
          description: The request requires user authentication
    post:
      tags:
        - Users
      summary: Create user
      description: This method creates a new user.
      operationId: createUser
      requestBody:
        description: Create user request
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUserRequest'
        required: true
      responses:
        201:
          description: New user has been successfully created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        401:
          description: The request requires user authentication
  /users/{userId}:
    delete:
      tags:
        - Users
      summary: Delete user by ID
      description: For valid response try integer IDs with positive integer value. Negative or non-integer values will generate API errors
      operationId: deleteUser
      parameters:
        - name: userId
          in: path
          description: ID of the user that needs to be deleted
          required: true
          schema:
            type: integer
            format: int64
      responses:
        204:
          description: User has been successfully deleted
        401:
          description: The request requires user authentication
        404:
          description: User not found
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        410:
          description: User has already been deleted
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  ## Stores API
  /stores:
    get:
      tags:
        - Stores
      summary: Retrieve user's stores
      operationId: getStores
      responses:
        200:
          description: The list of user's stores has been successfuly fetched
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Store'
        401:
          description: The request requires user authentication
    post:
      tags:
        - Stores
      summary: Create a new store
      operationId: createStore
      requestBody:
        description: New store creation request
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateStoreRequest'
        required: true
      responses:
        201:
          description: New store has been successfully created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Store'
        401:
          description: The request requires user authentication
        400:
          description: The request is not valid and cannot be acccepted

components:

  securitySchemes:
    OpenIDConnectAuth:
      type: openIdConnect
      description: >
        The only authentication way available for now is Google OpenID Connect.
        Enter your client Id and secret and authenticate behalf of your Google account
      openIdConnectUrl: https://accounts.google.com/.well-known/openid-configuration
      x-tokenName: id_token

  parameters:
    EntityId:
      name: id
      in: path
      description: Entity ID
      required: true
      schema:
        type: integer
        format: int64
        minimum: 1

  schemas:
    ## Products model
    Product:
      type: object
      properties:
        id:
          type: integer
          format: int64
        imageLink:
          type: string
          format: uri
        name:
          type: string
        price:
          type: number
          format: double
      required:
        - id
        - name
        - price
      example:
        name: ASU Газированная РЕТ 1л
        price: 200
        imageLink: https://api.rgbrands.com/uploads/0/2369-2268_a_su_gaz_1.png
    CreateProductRequest:
      type: object
      properties:
        name:
          type: string
        price:
          type: number
          format: double
      required:
        - name
        - price
      example:
        name: ASU Газированная РЕТ 1л
        price: 200
    UpdateProductRequest:
      type: object
      properties:
        name:
          type: string
        price:
          type: number
          format: double
      example:
        name: ASU Газированная вода 1л
        price: 180

    ## Users model
    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
        username:
          type: string
          pattern: '^[A-Za-z\-_]$'
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
          format: email
        phone:
          type: string
    CreateUserRequest:
      type: object
      properties:
        username:
          type: string
          pattern: '^[A-Za-z\-_]$'
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
          format: email
        password:
          type: string
          format: password
        phone:
          type: string
      required:
        - username
        - firstName
        - lastName
        - password
      example:
        username: adam.smith
        firstName: Adam
        lastName: Smith
        password: pa$$w0rd
        email: adam.smith@gmail.com
        phone: +997 (432) 234-45-45

    ## Stores model
    CreateStoreRequest:
      type: object
      properties:
        mode:
          type: string
          enum: [ seller, buyer ]
        name:
          type: string
        address:
          $ref: '#/components/schemas/Address'
      required:
        - name
        - mode
        - address
      example:
        mode: seller
        name: Grocery store on the st. Abay 12

    Store:
      type: object
      properties:
        id:
          type: integer
          format: int64
        mode:
          type: string
          enum: [ seller, buyer ]
        name:
          type: string
        address:
          $ref: '#/components/schemas/Address'
        owner:
          type: string
      example:
        id: 1
        mode: seller
        name: Grocery store on the st. Abay 12
        owner: Adam Smith

    Address:
      type: object
      properties:
        address_line:
          type: string
        city:
          type: string
        admin_area:
          type: string
        postal_code:
          type: string
          pattern: '^\d{6}$'
        country:
          type: string
          enum: [ KZ, BY ]
      required:
        - address_line
        - city
        - postal_code
        - country
      example:
        address_line: улица Мухамеджана Тынышбаева, дом 24А
        city: Нур-Султан
        postal_code: 010011
        country: KZ

    ## Common model
    Link:
      type: object
      properties:
        link:
          type: string
          format: uri
    File:
      type: object
      properties:
        file:
          type: string
          format: binary

    ErrorResponse:
      type: object
      properties:
        message:
          type: string
        exceptionClass:
          type: string
        params:
          type: object
